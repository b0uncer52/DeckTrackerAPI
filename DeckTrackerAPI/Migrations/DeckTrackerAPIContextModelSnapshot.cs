// <auto-generated />
using DeckTrackerAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DeckTrackerAPI.Migrations
{
    [DbContext(typeof(DeckTrackerAPIContext))]
    partial class DeckTrackerAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DeckTrackerAPI.Models.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeckName")
                        .IsRequired();

                    b.Property<int>("FormatId");

                    b.HasKey("DeckId");

                    b.HasIndex("FormatId");

                    b.ToTable("Deck");
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.Format", b =>
                {
                    b.Property<int>("FormatId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FormatName")
                        .IsRequired();

                    b.HasKey("FormatId");

                    b.ToTable("Format");
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.KeyToVictory", b =>
                {
                    b.Property<int>("KeyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("KeyName")
                        .IsRequired();

                    b.HasKey("KeyId");

                    b.ToTable("KeyToVictory");
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("BoardedGame");

                    b.Property<int>("Closeness");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("LoserMulligan");

                    b.Property<int>("LoserUserId");

                    b.Property<int>("LoserVersionId");

                    b.Property<string>("Notes")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.Property<int?>("VersionId");

                    b.Property<int>("WinnerMulligan");

                    b.Property<int>("WinnerUserId");

                    b.Property<int>("WinningVersionId");

                    b.HasKey("RecordId");

                    b.HasIndex("LoserUserId");

                    b.HasIndex("LoserVersionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VersionId");

                    b.HasIndex("WinnerUserId");

                    b.HasIndex("WinningVersionId");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.RecordKey", b =>
                {
                    b.Property<int>("RecordKeyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("KeyId");

                    b.Property<int>("RecordId");

                    b.HasKey("RecordKeyId");

                    b.HasIndex("KeyId");

                    b.HasIndex("RecordId");

                    b.ToTable("RecordKey");
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TeamName")
                        .IsRequired();

                    b.HasKey("TeamId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.TeamMember", b =>
                {
                    b.Property<int>("TeamMemberId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateJoined")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TeamId");

                    b.Property<int>("UserId");

                    b.HasKey("TeamMemberId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMember");
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.Version", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("DeckId");

                    b.Property<string>("DeckList")
                        .IsRequired();

                    b.Property<string>("VersionName")
                        .IsRequired();

                    b.HasKey("VersionId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DeckId");

                    b.ToTable("Version");
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.Deck", b =>
                {
                    b.HasOne("DeckTrackerAPI.Models.Format", "Format")
                        .WithMany("Decks")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.Record", b =>
                {
                    b.HasOne("DeckTrackerAPI.Models.User", "Loser")
                        .WithMany("Losses")
                        .HasForeignKey("LoserUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeckTrackerAPI.Models.Version", "LosingVersion")
                        .WithMany("VersionLosses")
                        .HasForeignKey("LoserVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeckTrackerAPI.Models.User")
                        .WithMany("Records")
                        .HasForeignKey("UserId");

                    b.HasOne("DeckTrackerAPI.Models.Version")
                        .WithMany("Records")
                        .HasForeignKey("VersionId");

                    b.HasOne("DeckTrackerAPI.Models.User", "Winner")
                        .WithMany("Wins")
                        .HasForeignKey("WinnerUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeckTrackerAPI.Models.Version", "WinningVersion")
                        .WithMany("VersionWins")
                        .HasForeignKey("WinningVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.RecordKey", b =>
                {
                    b.HasOne("DeckTrackerAPI.Models.KeyToVictory", "KeyToVictory")
                        .WithMany("RecordKeys")
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeckTrackerAPI.Models.Record", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.TeamMember", b =>
                {
                    b.HasOne("DeckTrackerAPI.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeckTrackerAPI.Models.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeckTrackerAPI.Models.Version", b =>
                {
                    b.HasOne("DeckTrackerAPI.Models.User", "Author")
                        .WithMany("Versions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeckTrackerAPI.Models.Deck", "Deck")
                        .WithMany("Versions")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
